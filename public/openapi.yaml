openapi: 3.0.0
info:
  title: ISB Conecta
  version: 0.0.0
paths:
  /api/auth/login/jwt:
    post:
      tags:
        - auth
      description: 'Login com JWT'
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: admin@desativemeemprod.com
                password:
                  type: string
                  example: asdf
              type: object
      responses:
        2XX:
          description: OK
  '/api/reports/{department}':
    get:
      tags:
        - reports
      description: 'Ver relatório de um departamento'
      parameters:
        -
          name: department
          in: path
          description: Departamento
          required: true
          schema:
            type: string
            example: reception
      responses:
        200:
          description: OK
      security:
        -
          JWT: []
#    put:
#      tags:
#        - autor
#      description: 'Edição de autor'
#      parameters:
#        -
#          name: id
#          in: path
#          description: 'Id autor'
#          required: true
#          schema:
#            type: integer
#            example: 1
#      requestBody:
#        content:
#          application/json;charset=UTF-8:
#            schema:
#              required:
#                - name
#              properties:
#                name:
#                  type: string
#                  example: 'Edgar Allan Poe'
#              type: object
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#    delete:
#      tags:
#        - autor
#      description: 'Deleção de autor'
#      parameters:
#        -
#          name: id
#          in: path
#          description: 'Id autor'
#          required: true
#          schema:
#            type: integer
#            example: 1
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#  /api/authors:
#    get:
#      tags:
#        - autor
#      description: 'Listagem de autores'
#      parameters:
#        -
#          name: name
#          in: query
#          description: 'Nome parcial do autor'
#          schema:
#            type: string
#            example: Allan
#        -
#          name: page
#          in: query
#          description: Paginação
#          schema:
#            type: integer
#            example: 1
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#    post:
#      tags:
#        - autor
#      description: 'Cadastro de autor'
#      requestBody:
#        content:
#          application/json;charset=UTF-8:
#            schema:
#              required:
#                - name
#              properties:
#                name:
#                  type: string
#                  example: 'Edgar Allan Poe'
#              type: object
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#  '/api/books/{id}':
#    get:
#      tags:
#        - livro
#      description: 'Exibição de 1 livro'
#      parameters:
#        -
#          name: id
#          in: path
#          description: 'Id livro'
#          required: true
#          schema:
#            type: integer
#            example: 1
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#    put:
#      tags:
#        - livro
#      description: 'Edição de livro'
#      parameters:
#        -
#          name: id
#          in: path
#          description: 'Id livro'
#          required: true
#          schema:
#            type: integer
#            example: 1
#      requestBody:
#        content:
#          application/json;charset=UTF-8:
#            schema:
#              required:
#                - title
#                - author_id
#                - amount
#              properties:
#                title:
#                  type: string
#                  example: 'Coração delator'
#                author_id:
#                  type: integer
#                  example: 1
#                amount:
#                  type: integer
#                  example: 3
#              type: object
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#    delete:
#      tags:
#        - livro
#      description: 'Deleção de livro'
#      parameters:
#        -
#          name: id
#          in: path
#          description: 'Id livro'
#          required: true
#          schema:
#            type: integer
#            example: 1
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#  /api/books:
#    get:
#      tags:
#        - livro
#      description: 'Listagem de livros'
#      parameters:
#        -
#          name: title
#          in: query
#          description: 'Título parcial do livro'
#          schema:
#            type: string
#            example: Allan
#        -
#          name: page
#          in: query
#          description: Paginação
#          schema:
#            type: integer
#            example: 1
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#    post:
#      tags:
#        - livro
#      description: 'Cadastro de livro'
#      requestBody:
#        content:
#          application/json;charset=UTF-8:
#            schema:
#              required:
#                - title
#                - author_id
#                - amount
#              properties:
#                title:
#                  type: string
#                  example: 'Coração delator'
#                author_id:
#                  type: integer
#                  example: 1
#                amount:
#                  type: integer
#                  example: 3
#              type: object
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#  '/api/books/{id}/activate':
#    post:
#      tags:
#        - livro
#      description: 'Reativação de livro'
#      parameters:
#        -
#          name: id
#          in: path
#          description: 'Id livro'
#          required: true
#          schema:
#            type: integer
#            example: 1
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#  '/api/loans/{id}':
#    get:
#      tags:
#        - empréstimo
#      description: 'Exibição de 1 empréstimo'
#      parameters:
#        -
#          name: id
#          in: path
#          description: 'Id empréstimo'
#          required: true
#          schema:
#            type: integer
#            example: 1
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#  /api/loans:
#    get:
#      tags:
#        - empréstimo
#      description: 'Listagem de empréstimos'
#      parameters:
#        -
#          name: bookId
#          in: query
#          description: Livro
#          schema:
#            type: integer
#            example: 1
#        -
#          name: memberId
#          in: query
#          description: 'Usuário do membro'
#          schema:
#            type: integer
#            example: 1
#        -
#          name: collaboratorId
#          in: query
#          description: 'Usuário do colaborador'
#          schema:
#            type: integer
#            example: 2
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#    post:
#      tags:
#        - empréstimo
#      description: 'Cadastro de empréstimo'
#      requestBody:
#        content:
#          application/json;charset=UTF-8:
#            schema:
#              required:
#                - bookId
#                - memberId
#                - collaboratorId
#              properties:
#                bookId:
#                  type: integer
#                  example: 1
#                memberId:
#                  type: integer
#                  example: 1
#                collaboratorId:
#                  type: integer
#                  example: 2
#              type: object
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#  '/api/loans/{id}/devolution':
#    patch:
#      tags:
#        - empréstimo
#      description: 'Devolução de empréstimo'
#      parameters:
#        -
#          name: id
#          in: path
#          description: 'Id empréstimo'
#          required: true
#          schema:
#            type: integer
#            example: 1
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#  '/api/user/{id}':
#    get:
#      tags:
#        - usuário
#      description: 'Exibição de 1 usuário'
#      parameters:
#        -
#          name: id
#          in: path
#          description: 'Id usuário'
#          required: true
#          schema:
#            type: integer
#            example: 1
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#  /api/users:
#    get:
#      tags:
#        - usuário
#      description: 'Listagem de usuários'
#      parameters:
#        -
#          name: name
#          in: query
#          description: 'Nome parcial do usuário'
#          schema:
#            type: string
#            example: Allan
#        -
#          name: email
#          in: query
#          description: 'Email parcial do usuário'
#          schema:
#            type: string
#            example: example@foo.com
#        -
#          name: cpf
#          in: query
#          description: 'CPF do usuário'
#          schema:
#            type: string
#            example: '37128197060'
#        -
#          name: role
#          in: query
#          description: 'Papel do usuário'
#          schema:
#            type: string
#            enum:
#              - membro
#              - colaborador
#              - admin
#        -
#          name: page
#          in: query
#          description: Paginação
#          schema:
#            type: integer
#            example: 1
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#    post:
#      tags:
#        - usuário
#      description: 'Cadastro de usuário'
#      requestBody:
#        content:
#          application/json;charset=UTF-8:
#            schema:
#              required:
#                - name
#                - cpf
#                - password
#                - email
#              properties:
#                name:
#                  type: string
#                  example: Diego
#                cpf:
#                  type: string
#                  example: '37128197060'
#                password:
#                  type: string
#                  example: '19800507'
#                email:
#                  type: string
#                  example: example@foo.com
#                role:
#                  type: string
#                  example: membro
#              type: object
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#  '/api/users/{id}':
#    put:
#      tags:
#        - usuário
#      description: 'Edição de usuário'
#      parameters:
#        -
#          name: id
#          in: path
#          description: 'Id usuário'
#          required: true
#          schema:
#            type: integer
#            example: 1
#      requestBody:
#        content:
#          application/json;charset=UTF-8:
#            schema:
#              required:
#                - name
#                - cpf
#                - password
#                - email
#              properties:
#                name:
#                  type: string
#                  example: Diego
#                cpf:
#                  type: string
#                  example: '37128197060'
#                password:
#                  type: string
#                  example: '19800507'
#                email:
#                  type: string
#                  example: example@foo.com
#                role:
#                  type: string
#                  example: membro
#              type: object
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#    delete:
#      tags:
#        - usuário
#      description: 'Deleção de usuário'
#      parameters:
#        -
#          name: id
#          in: path
#          description: 'Id autor'
#          required: true
#          schema:
#            type: integer
#            example: 1
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
#  '/api/users/{id}/activate':
#    post:
#      tags:
#        - usuário
#      description: 'Reativação de usuário'
#      parameters:
#        -
#          name: id
#          in: path
#          description: 'Id usuário'
#          required: true
#          schema:
#            type: integer
#            example: 1
#      responses:
#        2XX:
#          description: OK
#      security:
#        -
#          JWT: []
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
